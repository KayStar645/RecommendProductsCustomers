@using RecommendProductsCustomers.Models;
@{
    var employee = ViewData["employee"] as EmployeeModel;
    var internalCode = ViewData["internalCode"] as string;
    var importDate = ViewData["importDate"] as string;

    var importBill = ViewData["importBill"] as ImportBillModel;
    var products = ViewData["products"] as List<ProductModel>;
    var hobbies = ViewData["listHobbies"] as List<HobbyModel>;
}

<link href="~/css/multiselect.css" rel="stylesheet" />

<script>
    var _description, _material, _preserve;


    ClassicEditor
        .create(document.querySelector('._description'))
        .then(newEditor => {
            _description = newEditor;
        })
        .catch(error => {
        });


    ClassicEditor
        .create(document.querySelector('._material'))
        .then(newEditor => {
            _material = newEditor;
        })
        .catch(error => {
        });

    ClassicEditor
        .create(document.querySelector('._preserve'))
        .then(newEditor => {
            _preserve = newEditor;
        })
        .catch(error => {
        });
</script>

<style>
    .label {
        font-size: 19px !important;
    }

    select, input {
        width: 100%;
        padding: 4px 8px;
        font-size: 18px;
    }

    #overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    #popup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 60%;
        background-color: rgba(255, 255, 255, 1);
        z-index: 5000;
        border-radius: 6px;
    }

    #popupContent {
        margin-top: 60px;
    }

    #closePopupButton {
        position: absolute;
        top: 30px;
        right: 0px;
        transform: translate(-25%, -50%);
        cursor: pointer;
        color: #d10000;
    }

    #savePopup {
        height: calc(100vh - 150px);
        overflow: auto;
        padding-bottom: 80px;
    }

    .ck-blurred.ck.ck-content.ck-editor__editable.ck-rounded-corners.ck-editor__editable_inline {
        height: 200px;
    }

    #imageContainer {
        display: flex;
        flex-wrap: wrap;
    }

    #imageContainer img {
        width: 100px;
        height: 100px;
        margin: 5px;
        object-fit: cover;
    }
</style>

<div class="container">
    <div class="card my-3 py-3">
        <div class="container">
            <div class="card my-3 py-3">
                <div class="container col-12 d-flex flex-lg-wrap">
                    <div class="col-4 pe-5 d-none">
                        <input type="text" name="id" value="@importBill?.id" readonly />
                    </div>
                    
                    <div class="col-4 pe-5">
                        <label class="p-1 fw-bolder label">Mã đơn nhập</label> <br />
                        <input type="text" name="internalCode" value="@(internalCode == null ? @importBill?.internalCode : internalCode)" readonly />
                    </div>

                    <div class="col-4 pe-5">
                        <label class="p-1 fw-bolder label">Ngày nhập</label> <br />
                        <input type="text" name="importDate" value="@(importDate == null ? string.Format("{0:dd/MM/yyyy}", importBill?.dateImport) : importDate)" readonly />
                    </div>

                    <div class="col-4 pe-5">
                        <label class="p-1 fw-bolder label">Nhân viên</label> <br />
                        <input type="text" name="employee" value="@employee?.name" readonly />
                    </div>

                    <div class="col-4 pe-5">
                        <label class="p-1 fw-bolder label">Nhà phân phối</label> <br />
                        <input type="text" name="distributor" value="@importBill?.distributor" />
                    </div>

                    <div class="col-4 pe-5">
                        <label class="p-1 fw-bolder label">Liên hệ</label> <br />
                        <input type="text" name="contact" value="@importBill?.contactPhone" />
                    </div>

                    <div class="col-4 pe-5">
                        <label class="p-1 fw-bolder label">Thành tiền</label> <br />
                        <input type="text" name="money" value="@(importBill?.price != null ? importBill.price.ToString() : "0")" readonly />
                    </div>



                </div>
            </div>
            <div class="card my-3 py-3">
                <div class="container">
                    <div class="card p-2">
                        <div class="col-12 d-flex align-items-center">
                            <div class="col-8 pt-2 d-inline-block">
                                <h3>Danh sách sản phẩm</h3>
                            </div>
                            <div class="col-2 text-end pt-2 d-inline-block">
                                <button id="importBill1"
                                        class="bg-success border-0 py-2 px-4 fw-bold text-white rounded">
                                    Nhập hàng
                                </button>
                            </div>
                           @*  <div class="col-2 text-start ps-3 pt-2 d-inline-block">
                                <button id="saveChange"
                                        class="bg-warning border-0 py-2 px-4 fw-bold text-white rounded">
                                    Lưu thay đổi
                                </button>
                            </div> *@
                            <div class="col-2 text-end pt-2 d-inline-block">
                                <button id="openPopupCreate"
                                        class="bg-info border-0 py-2 px-4 fw-bold text-white rounded">
                                    Thêm sản phẩm
                                </button>
                            </div>
                        </div>
                    </div>

                    <table class="table-info w-100 mt-4" border="2">
                        <thead>
                            <tr>
                                <th class="min-vw-10"></th>
                                <th class="text-center">Mã sản phẩm</th>
                                <th class="text-center">Tên sản phẩm</th>
                                <th class="text-center">Hình ảnh</th>
                                <th class="text-center">Phù hợp</th>
                                <th class="text-center">Kích thước</th>
                                <th class="text-center">Số lượng </th>
                                <th class="text-center">Đơn giá</th>
                            </tr>
                        </thead>
                        <tbody id="tableProducts">
                            @if (products != null)
                            {
                                @foreach (var item in products)
                                {
                                    <tr>
                                        <td class="text-center">
                                            <i class="fa-regular fa-pen-to-square pe-3" style="color:blue"></i>
                                            <i class="fa-solid fa-trash" style="color:red"></i>
                                        </td>
                                        <td class="text-center d-none" data-id="@item?.id">@item?.id</td>
                                        <td class="text-center">@item?.internalCode</td>
                                        <td class="text-center">@item?.name</td>
                                        <td class="text-center">
                                            <img src="@item?.images?.FirstOrDefault()" class="w-80" style="height: 80px;" />
                                        </td>
                                        <td class="text-center" data-hobbies="@string.Join(",", item?.hobbies)">@(string.Join(",", item?.hobbies))</td>
                                        <td class="text-center">@item?.size</td>
                                        <td class="text-center">@item?.quantity</td>
                                        <td class="text-center">@String.Format("{0:N0}", item?.price)</td>
                                        <td class="text-center d-none" data-description="@item?.description">@item?.description</td>
                                        <td class="text-center d-none" data-material="@item?.material">@item?.material</td>
                                        <td class="text-center d-none" data-preserve="@item?.preserve">@item?.preserve</td>
                                        <td class="text-center d-none" data-images="@string.Join(",", item?.images)">@(string.Join(",", item?.images))</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


<div id="overlay"></div>
<div id="popup">
    <div class="card d-block position-absolute top-0 start-0 end-0">
        <h3 id="title" class="px-4 py-2"></h3>
        <i id="closePopupButton"
           class="fa-solid fa-rectangle-xmark fa-2xl"
           style="color: #d10000;"></i>
    </div>

    <div id="popupContent">
        <div class="container" id="savePopup">
            <div class="card px-lg-5 py-2">
                <div class="col-12 d-flex flex-lg-wrap">
                    <div class="col-12 d-none">
                        <input type="text" name="id" />
                    </div>

                    <div class="col-4 pe-3">
                        <label class="p-1 fw-bolder label">Mã sản phẩm</label> <br />
                        <input type="text" name="internalCodeProduct" />
                    </div>

                    <div class="col-8">
                        <label class="p-1 fw-bolder label">Tên sản phẩm</label> <br />
                        <input type="text" name="name" step="1" />
                    </div>

                    <div class="col-5 pe-3">
                        <label class="p-1 fw-bolder label">Số lượng</label> <br />
                        <input type="number" name="quantity" min="1" />
                    </div>

                    <div class="col-5 pe-3">
                        <label class="p-1 fw-bolder label">Đơn giá</label> <br />
                        <input type="number" name="price" min="1" step="1" />
                    </div>

                    <div class="col-2">
                        <label class="p-1 fw-bolder label">Kích thước</label> <br />
                        <select name="size">
                            <option value="S">S</option>
                            <option value="X">X</option>
                            <option value="L">L</option>
                        </select>
                    </div>

                    <div class="col-6">
                        <label class="p-1 fw-bolder label">Hình ảnh</label> <br />
                        <input type="file" id="imageInput" accept="image/*">
                        <div id="imageContainer"></div>
                    </div>
                    <div class="col-6">
                        <label class="p-1 fw-bolder label">Sở thích phù hợp</label> <br />
                        <span id="combo3-remove" style="display: none">remove</span>
                        <div class="combo js-inline-buttons">
                            <div role="combobox" aria-haspopup="listbox" aria-expanded="false" aria-owns="listbox3" class="input-wrapper multiselect-inline">
                                <ul class="selected-options" aria-live="assertive" aria-atomic="false" aria-relevant="additions removals" id="combo3-selected"></ul>
                                <input aria-activedescendant=""
                                       aria-autocomplete="list"
                                       aria-labelledby="combo3-label combo3-selected"
                                       id="combo3"
                                       class="combo-input"
                                       type="text">
                            </div>
                            <div class="combo-menu" role="listbox" aria-multiselectable="true" id="listbox3"></div>
                        </div>
                    </div>

                    <div class="col-12 h-100">
                        <label class="p-1 fw-bolder label">Mô tả</label> <br />
                        <div id="description">
                            <div class="w-100 _description" style="max-height:180px;min-height:180px;height:180px"></div>
                        </div>
                    </div>

                    <div class="col-12 h-100">
                        <label class="p-1 fw-bolder label">Thông tin về chất liệu</label> <br />
                        <div id="material">
                            <div class="w-100 _material" style="max-height:180px;min-height:180px;height:180px"></div>
                        </div>
                    </div>

                    <div class="col-12 h-100">
                        <label class="p-1 fw-bolder label">Hướng dẫn bảo quản</label> <br />
                        <div id="preserve">
                            <div class="w-100 _preserve" style="max-height:180px;min-height:180px;height:180px"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card text-end position-absolute bottom-0 start-0 end-0">
        <div class="d-flex justify-content-end ">
            <button id="saveProductButton"
                    class="bg-info border-0 py-2 px-4 me-2 fw-bold text-white my-3 rounded">
                Lưu
            </button>
        </div>
    </div>
</div>

<script>
    var createOpen = document.getElementById("openPopupCreate");
    var updateOpens = document.querySelectorAll(".fa-regular.fa-pen-to-square"); // Load dữ liệu lên popup
    var closeButton = document.getElementById("closePopupButton");
    var overlay = document.getElementById("overlay");
    var popup = document.getElementById("popup");

    createOpen.addEventListener("click", function () {
        overlay.style.display = "block";
        popup.style.display = "block";

        var rowData = {
            internalCode: "",
            name: "",
            dateBirth: "",
            gender: "",
            phone: "",
        };

        document.getElementById("title").innerText = "Thêm sản phẩm mới";


        loadData(rowData);
    });

    updateOpens.forEach(function (button) {
        button.addEventListener("click", function () {
            overlay.style.display = "block";
            popup.style.display = "block";

            var parentRow = button.closest("tr");
            var rowData = {
                id: parentRow.querySelector("td:nth-child(2)").textContent,
                internalCode: parentRow.querySelector("td:nth-child(3)").textContent,
                name: parentRow.querySelector("td:nth-child(4)").textContent,
                dateBirth: parentRow.querySelector("td:nth-child(5)").textContent,
                gender: parentRow.querySelector("td:nth-child(6)").textContent,
                phone: parentRow.querySelector("td:nth-child(7)").textContent,
            };

            document.getElementById("title").innerText = "Cập nhật thông tin sản phẩm";

            loadData(rowData);
        });
    });

    closeButton.addEventListener("click", function () {
        overlay.style.display = "none";
        popup.style.display = "none";
    });

    function loadData(data) {
        const dateParts = data.dateBirth.split('/');
        document.querySelector("#imageContainer").innerHTML = "";

        // document.querySelector('input[name="id"]').value = data.id;
        // document.querySelector('input[name="internalCode"]').value = data.internalCode;
        // document.querySelector('input[name="name"]').value = data.name;
        // document.querySelector('input[name="dateBirth"]').value = `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`;
        // document.querySelector('select[name="gender"]').value = data.gender;
        // document.querySelector('input[name="phone"]').value = data.phone;
    }
</script>

@* Lưu đơn hàng nhập với trạng thái = false (Nháp) *@
<script>
    $(document).ready(function () {
        $("#saveChange").on("click", function (e) {
            e.preventDefault();

            var pImportBillVM = {
                importBill: getImportBill(),
                products: getProducts()
            };

            $.ajax({
                url: "/ImportBill/CreateOrUpdate",
                method: "POST",
                data: JSON.stringify(pImportBillVM),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    window.location.href = "/ImportBill/Index";
                },
                error: function () {
                    $.ajax({
                        url: "/ImportBill/Index",
                        method: "GET",
                        success: function (data) {
                            $('#importBill').html(data);
                        }
                    });
                }
            });
        });

        $("#importBill1").on("click", function (e) {
            e.preventDefault();

            var pImportBillVM = {
                importBill: getImportBill2(),
                products: getProducts()
            };

            console.log(pImportBillVM);

            $.ajax({
                url: "/ImportBill/CreateOrUpdate",
                method: "POST",
                data: JSON.stringify(pImportBillVM),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    window.location.href = "/ImportBill/Index";
                },
                error: function () {
                    $.ajax({
                        url: "/ImportBill/Index",
                        method: "GET",
                        success: function (data) {
                            $('#importBill').html(data);
                        }
                    });
                }
            });
        });
    });
    function getImportBill() {
        const dateParts = document.querySelector('input[name="importDate"]').value.split('/');

        var importBill = {
            id: document.querySelector('input[name="id"]').value,
            internalCode: document.querySelector('input[name="internalCode"]').value,
            dateImport: `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`,
            distributor: document.querySelector('input[name="distributor"]').value,
            contactPhone: document.querySelector('input[name="contact"]').value,
            price: document.querySelector('input[name="money"]').value,
            isActive: false
        };
        return importBill;
    }

    function getImportBill2() {
        const dateParts = document.querySelector('input[name="importDate"]').value.split('/');

        var importBill = {
            id: document.querySelector('input[name="id"]').value,
            internalCode: document.querySelector('input[name="internalCode"]').value,
            dateImport: `${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`,
            distributor: document.querySelector('input[name="distributor"]').value,
            contactPhone: document.querySelector('input[name="contact"]').value,
            price: document.querySelector('input[name="money"]').value,
            isActive: true
        };
        return importBill;
    }


    function getProducts() {
        var products = [];

        var rows = document.getElementById("tableProducts").querySelectorAll("tr");

        rows.forEach(function (row) {
            var cells = row.querySelectorAll("td");
            console.log(cells[11].getAttribute("data-preserve"))
            console.log(cells[12].getAttribute("data-images"))
            console.log(cells[5].getAttribute("data-hobbies"))
            if (cells.length >= 7) {
                var product = {
                    id: cells[1].getAttribute("data-id"),
                    internalCode: cells[2].textContent,
                    name: cells[3].textContent,
                    size: cells[6].textContent,
                    quantity: cells[7].textContent,
                    price: cells[8].textContent.replace(/,/g, ""),
                    description: cells[9].getAttribute("data-description"),
                    material: cells[10].getAttribute("data-material"),
                    preserve: cells[11].getAttribute("data-preserve"),
                    images: cells[12].getAttribute("data-images").split(","),
                    hobbies: cells[5].getAttribute("data-hobbies").split(","),
                };
                products.push(product);
            }
        });

        return products;
    }

</script>


@* Add sản phẩm từ popup vào table *@
<script>
    var saveProductButton = document.getElementById("saveProductButton");

    saveProductButton.addEventListener("click", function () {
        var data = getDataFromPopup();
        
        addRowTable(data);

        // Cập nhật giá trị tổng giá trị trên giao diện, xử lý giá
        var quantity = parseFloat(data.quantity); 
        var price = parseFloat(data.price); 
        var totalPrice = quantity * price;  

        document.querySelector('input[name="money"]').value = totalPrice;

    
        overlay.style.display = "none";
        popup.style.display = "none";
    });

    function addRowTable(data) {
        // Đưa dữ liệu lên table
        var newRow = document.createElement("tr");

        // Chức năng
        var cell = document.createElement("td");
        cell.className = "text-center";

        var updateCell = document.createElement("i");
        updateCell.className = "fa-regular fa-pen-to-square pe-3";
        updateCell.style.color = "blue";

        var createCell = document.createElement("i");
        createCell.className = "fa-solid fa-trash";
        createCell.style.color = "red";

        cell.appendChild(updateCell);
        cell.appendChild(createCell);

        // id - Ẩn
        var idCell = document.createElement("td");
        idCell.className = "text-center d-none";
        idCell.setAttribute("data-id", "");

        // Mã sản phẩm
        var internalCodeCell = document.createElement("td");
        internalCodeCell.className = "text-center";
        internalCodeCell.textContent = data.internalCode;

        // Tên sản phẩm
        var nameCell = document.createElement("td");
        nameCell.className = "text-center";
        nameCell.textContent = data.name;

        // Hình ảnh
        var imageCell = document.createElement("td");
        imageCell.className = "text-center";
        var image = document.createElement("img");
        if (data.images.length > 0) {
            image.src = data.images[0];
        }
        image.height = "80";
        imageCell.appendChild(image);

        // Sở thích
        var hobbiesCell = document.createElement("td");
        hobbiesCell.className = "text-center";
        var hobbies = [];
        data.hobbies.forEach(function (hobby) {
            hobbies.push(hobby);
        });
        hobbiesCell.setAttribute("data-hobbies", hobbies);

        // Kích thước
        var sizeCell = document.createElement("td");
        sizeCell.className = "text-center";
        sizeCell.textContent = data.size;

        // Số lượng
        var quantityCell = document.createElement("td");
        quantityCell.className = "text-center";
        quantityCell.textContent = data.quantity;

        // Đơn giá
        var priceCell = document.createElement("td");
        priceCell.className = "text-center";
        priceCell.textContent = data.price;

        // Thông tin thêm để lưu
        var descriptionCell = document.createElement("td");
        descriptionCell.className = "text-center d-none";
        descriptionCell.setAttribute("data-description", data.description);

        var materialCell = document.createElement("td");
        materialCell.className = "text-center d-none";
        materialCell.setAttribute("data-material", data.material);

        var preserveCell = document.createElement("td");
        preserveCell.className = "text-center d-none";
        preserveCell.setAttribute("data-preserve", data.preserve);

        var imagesCell = document.createElement("td");
        imagesCell.className = "text-center d-none";
        var relativeImageUrls = [];
        data.images.forEach(function (fullImageUrl) {
            var relativeImageUrl = fullImageUrl.replace(/^https:\/\/localhost:7127/, "");
            relativeImageUrls.push(relativeImageUrl);
        });
        imagesCell.setAttribute("data-images", relativeImageUrls);

        // Thêm cột vào hàng
        newRow.appendChild(cell);
        newRow.appendChild(idCell);
        newRow.appendChild(internalCodeCell);
        newRow.appendChild(nameCell);
        newRow.appendChild(imageCell);
        newRow.appendChild(hobbiesCell);
        newRow.appendChild(sizeCell);
        newRow.appendChild(quantityCell);
        newRow.appendChild(priceCell);
        newRow.appendChild(descriptionCell);
        newRow.appendChild(materialCell);
        newRow.appendChild(preserveCell);
        newRow.appendChild(imagesCell);

        // Tìm tbody của bảng và thêm hàng mới vào đó
        var tableBody = document.querySelector("tbody");
        tableBody.appendChild(newRow);
        console.log(newRow);
    }

    function getDataFromPopup() {
        var data = {
            internalCode: document.querySelector('input[name="internalCodeProduct"]').value,
            name: document.querySelector('input[name="name"]').value,
            quantity: document.querySelector('input[name="quantity"]').value,
            price: document.querySelector('input[name="price"]').value,
            size: document.querySelector('select[name="size"]').value,
            description: _description.getData(),
            material: _material.getData(),
            preserve: _preserve.getData(),
            images: [],
            hobbies: [],
        };

        var images = document.getElementById('imageContainer').querySelectorAll('img');
        images.forEach(function (image) {
            data.images.push(image.src);
        });

        var optionElements = document.querySelectorAll('.remove-option');

        optionElements.forEach(function (optionElement) {
            data.hobbies.push(optionElement.innerHTML.trim());
        });


        return data;
    }
</script>


@* Chọn nhiều hình ảnh *@
<script>
    document.getElementById("imageInput").addEventListener("change", function (e) {
        var files = e.target.files;

        for (var i = 0; i < files.length; i++) {
            var file = files[i];

            var formData = new FormData();
            formData.append("file", file);

            $.ajax({
                url: "/Upload/UploadImage",
                method: "POST",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    var imageUrl = data.imageUrl;

                    var image = document.createElement("img");
                    image.src = imageUrl;

                    document.getElementById("imageContainer").appendChild(image);
                }
            });
        }
    });
</script>


@* Quay về trang trước đó *@
<script>
    $("#goBackButton").click(function () {
        $.ajax({
            url: "/ImportBill/Index",
            type: "GET",
            success: function (data) {
                $("#content").html(data);
            }
        });
    });
</script>

<script>
    var options = @Html.Raw(Json.Serialize(hobbies?.Select(h => h.name).ToList()));

    // make it easier for ourselves by putting some values in objects
    // in TypeScript, these would be enums
    const Keys = {
      Backspace: 'Backspace',
      Clear: 'Clear',
      Down: 'ArrowDown',
      End: 'End',
      Enter: 'Enter',
      Escape: 'Escape',
      Home: 'Home',
      Left: 'ArrowLeft',
      PageDown: 'PageDown',
      PageUp: 'PageUp',
      Right: 'ArrowRight',
      Space: ' ',
      Tab: 'Tab',
      Up: 'ArrowUp'
    }

    const MenuActions = {
      Close: 0,
      CloseSelect: 1,
      First: 2,
      Last: 3,
      Next: 4,
      Open: 5,
      Previous: 6,
      Select: 7,
      Space: 8,
      Type: 9
    }

    // filter an array of options against an input string
    // returns an array of options that begin with the filter string, case-independent
    function filterOptions(options = [], filter, exclude = []) {
      return options.filter((option) => {
        const matches = option.toLowerCase().indexOf(filter.toLowerCase()) === 0;
        return matches && exclude.indexOf(option) < 0;
      });
    }

    // return an array of exact option name matches from a comma-separated string
    function findMatches(options, search) {
      const names = search.split(',');
      return names.map((name) => {
        const match = options.filter((option) => name.trim().toLowerCase() === option.toLowerCase());
        return match.length > 0 ? match[0] : null;
      })
      .filter((option) => option !== null);
    }

    // return combobox action from key press
    function getActionFromKey(key, menuOpen) {
      // handle opening when closed
      if (!menuOpen && key === Keys.Down) {
        return MenuActions.Open;
      }

      // handle keys when open
      if (key === Keys.Down) {
        return MenuActions.Next;
      }
      else if (key === Keys.Up) {
        return MenuActions.Previous;
      }
      else if (key === Keys.Home) {
        return MenuActions.First;
      }
      else if (key === Keys.End) {
        return MenuActions.Last;
      }
      else if (key === Keys.Escape) {
        return MenuActions.Close;
      }
      else if (key === Keys.Enter) {
        return MenuActions.CloseSelect;
      }
      else if (key === Keys.Backspace || key === Keys.Clear || key.length === 1) {
        return MenuActions.Type;
      }
    }

    // get index of option that matches a string
    function getIndexByLetter(options, filter) {
      const firstMatch = filterOptions(options, filter)[0];
      return firstMatch ? options.indexOf(firstMatch) : -1;
    }

    // get updated option index
    function getUpdatedIndex(current, max, action) {
      switch(action) {
        case MenuActions.First:
          return 0;
        case MenuActions.Last:
          return max;
        case MenuActions.Previous:
          return Math.max(0, current - 1);
        case MenuActions.Next:
          return Math.min(max, current + 1);
        default:
          return current;
      }
    }

    // check if an element is currently scrollable
    function isScrollable(element) {
      return element && element.clientHeight < element.scrollHeight;
    }

    // ensure given child element is within the parent's visible scroll area
    function maintainScrollVisibility(activeElement, scrollParent) {
      const { offsetHeight, offsetTop } = activeElement;
      const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent;

      const isAbove = offsetTop < scrollTop;
      const isBelow = (offsetTop + offsetHeight) > (scrollTop + parentOffsetHeight);

      if (isAbove) {
        scrollParent.scrollTo(0, offsetTop);
      }
      else if (isBelow) {
        scrollParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);
      }
    }

    /*
     * Multiselect CSV code
     */
     const MultiselectCSV = function(el, options) {
      // element refs
      this.el = el;
      this.comboEl = el.querySelector('[role=combobox]');
      this.inputEl = el.querySelector('input');
      this.listboxEl = el.querySelector('[role=listbox]');

      // data
      this.idBase = this.inputEl.id;
      this.options = options;
      this.filteredOptions = options;
      this.selectedOptions = [];

      // state
      this.activeIndex = 0;
      this.open = false;
    }

    MultiselectCSV.prototype.init = function() {

      this.inputEl.addEventListener('input', this.onInput.bind(this));
      this.inputEl.addEventListener('blur', this.onInputBlur.bind(this));
      this.inputEl.addEventListener('click', () => this.updateMenuState(true));
      this.inputEl.addEventListener('keydown', this.onInputKeyDown.bind(this));

      this.options.map((option, index) => {
        const optionEl = document.createElement('div');
        optionEl.setAttribute('role', 'option');
        optionEl.id = `${this.idBase}-${index}`;
        optionEl.className = index === 0 ? 'combo-option option-current' : 'combo-option';
        optionEl.setAttribute('aria-selected', 'false');
        optionEl.innerText = option;

        optionEl.addEventListener('click', () => { this.onOptionClick(index); });
        optionEl.addEventListener('mousedown', this.onOptionMouseDown.bind(this));

        this.listboxEl.appendChild(optionEl);
      });
    }

    MultiselectCSV.prototype.filterOptions = function(value, excludeOptions = []) {
      this.filteredOptions = filterOptions(this.options, value, excludeOptions);

      // hide/show options based on filtering
      const options = this.el.querySelectorAll('[role=option]');
      [...options].forEach((optionEl) => {
        const value = optionEl.innerText;
        if (this.filteredOptions.indexOf(value) > -1) {
          optionEl.style.display = 'block';
        }
        else {
          optionEl.style.display = 'none';
        }
      });
    }

    MultiselectCSV.prototype.onInput = function() {
      const curValue = this.inputEl.value;
      const currentSearch = curValue.split(',').pop().replace(/^\s+/, '');
      const matchingOptions = findMatches(this.options, curValue);
      this.updateSelectedOptions(matchingOptions, false);
      this.filterOptions(currentSearch, this.selectedOptions);

      // if active option is not in filtered options, set it to first filtered option
      if (this.filteredOptions.indexOf(this.options[this.activeIndex]) < 0) {
        const firstFilteredIndex = Math.max(this.options.indexOf(this.filteredOptions[0]), 0);
        this.onOptionChange(firstFilteredIndex);
      }

      const menuState = this.filteredOptions.length > 0;
      if (this.open !== menuState) {
        this.updateMenuState(menuState, false);
      }
    }

    MultiselectCSV.prototype.onInputKeyDown = function(event) {
      const { key } = event;

      const max = this.filteredOptions.length - 1;
      const activeFilteredIndex = this.filteredOptions.indexOf(this.options[this.activeIndex]);

      const action = getActionFromKey(key, this.open);

      switch(action) {
        case MenuActions.Next:
        case MenuActions.Last:
        case MenuActions.First:
        case MenuActions.Previous:
          event.preventDefault();
          const nextFilteredIndex = getUpdatedIndex(activeFilteredIndex, max, action);
          const nextRealIndex = this.options.indexOf(this.filteredOptions[nextFilteredIndex]);
          return this.onOptionChange(nextRealIndex);
        case MenuActions.CloseSelect:
          event.preventDefault();
          this.updateOption(this.activeIndex);
          return this.updateMenuState(false);
        case MenuActions.Close:
          event.preventDefault();
          return this.updateMenuState(false);
        case MenuActions.Open:
          return this.updateMenuState(true);
      }
    }

    MultiselectCSV.prototype.onInputBlur = function() {
      if (this.ignoreBlur) {
        this.ignoreBlur = false;
        return;
      }

      if (this.open) {
        this.processInputString(this.inputEl.value);
        this.updateMenuState(false, false);
      }
    }

    MultiselectCSV.prototype.onOptionChange = function(index) {
      this.activeIndex = index;
      this.inputEl.setAttribute('aria-activedescendant', `${this.idBase}-${index}`);

      // update active style
      const options = this.el.querySelectorAll('[role=option]');
      [...options].forEach((optionEl) => {
        optionEl.classList.remove('option-current');
      });
      options[index].classList.add('option-current');

      if (this.open && isScrollable(this.listboxEl)) {
        maintainScrollVisibility(options[index], this.listboxEl);
      }
    }

    MultiselectCSV.prototype.onOptionClick = function(index) {
      this.onOptionChange(index);
      this.updateOption(index);
      this.inputEl.focus();
    }

    MultiselectCSV.prototype.onOptionMouseDown = function() {
      this.ignoreBlur = true;
    }

    MultiselectCSV.prototype.processInputString = function(inputString) {
      const options = findMatches(this.options, inputString);
      this.updateSelectedOptions(options, true);
    }

    MultiselectCSV.prototype.updateOption = function(index) {
      const option = this.options[index];
      const selectedIndex = this.selectedOptions.indexOf(option);
      const isSelected = selectedIndex > -1;
      this.filterOptions('');

      if (isSelected) {
        this.selectedOptions.splice(selectedIndex, 1);
        this.updateSelectedOptions(this.selectedOptions, true);
      }

      else {
        this.updateSelectedOptions([...this.selectedOptions, option], true);
      }
    }

    MultiselectCSV.prototype.updateMenuState = function(open, callFocus = true) {
      this.open = open;

      this.comboEl.setAttribute('aria-expanded', `${open}`);
      open ? this.el.classList.add('open') : this.el.classList.remove('open');
      callFocus && this.inputEl.focus();
    }

    MultiselectCSV.prototype.updateSelectedOptions = function(options, setInputValue) {
      this.selectedOptions = options;

      if (setInputValue) {
        this.inputEl.value = this.selectedOptions.join(', ');
      }

      // update aria-selected
      const optionEls = this.el.querySelectorAll('[role=option]');
      [...optionEls].forEach((optionEl) => {
        const optionSelected = this.selectedOptions.indexOf(optionEl.innerText) > -1;
        optionEl.setAttribute('aria-selected', `${optionSelected}`);
        optionSelected ? optionEl.classList.add('option-selected') : optionEl.classList.remove('option-selected');
      });

      this.filterOptions('');
    }

    /*
     * Multiselect Combobox w/ Buttons code
     */
     const MultiselectButtons = function(el, options) {
      // element refs
      this.el = el;
      this.comboEl = el.querySelector('[role=combobox]');
      this.inputEl = el.querySelector('input');
      this.listboxEl = el.querySelector('[role=listbox]');

      this.idBase = this.inputEl.id;
      this.selectedEl = document.getElementById(`${this.idBase}-selected`);

      // data
      this.options = options;
      this.filteredOptions = options;

      // state
      this.activeIndex = 0;
      this.open = false;
    }

    MultiselectButtons.prototype.init = function() {

      this.inputEl.addEventListener('input', this.onInput.bind(this));
      this.inputEl.addEventListener('blur', this.onInputBlur.bind(this));
      this.inputEl.addEventListener('click', () => this.updateMenuState(true));
      this.inputEl.addEventListener('keydown', this.onInputKeyDown.bind(this));

      this.options.map((option, index) => {
        const optionEl = document.createElement('div');
        optionEl.setAttribute('role', 'option');
        optionEl.id = `${this.idBase}-${index}`;
        optionEl.className = index === 0 ? 'combo-option option-current' : 'combo-option';
        optionEl.setAttribute('aria-selected', 'false');
        optionEl.innerText = option;

        optionEl.addEventListener('click', () => { this.onOptionClick(index); });
        optionEl.addEventListener('mousedown', this.onOptionMouseDown.bind(this));

        this.listboxEl.appendChild(optionEl);
      });
    }

    MultiselectButtons.prototype.filterOptions = function(value) {
      this.filteredOptions = filterOptions(this.options, value);

      // hide/show options based on filtering
      const options = this.el.querySelectorAll('[role=option]');
      [...options].forEach((optionEl) => {
        const value = optionEl.innerText;
        if (this.filteredOptions.indexOf(value) > -1) {
          optionEl.style.display = 'block';
        }
        else {
          optionEl.style.display = 'none';
        }
      });
    }

    MultiselectButtons.prototype.onInput = function() {
      const curValue = this.inputEl.value;
      this.filterOptions(curValue);

      // if active option is not in filtered options, set it to first filtered option
      if (this.filteredOptions.indexOf(this.options[this.activeIndex]) < 0) {
        const firstFilteredIndex = this.options.indexOf(this.filteredOptions[0]);
        this.onOptionChange(firstFilteredIndex);
      }

      const menuState = this.filteredOptions.length > 0;
      if (this.open !== menuState) {
        this.updateMenuState(menuState, false);
      }
    }

    MultiselectButtons.prototype.onInputKeyDown = function(event) {
      const { key } = event;

      const max = this.filteredOptions.length - 1;
      const activeFilteredIndex = this.filteredOptions.indexOf(this.options[this.activeIndex]);

      const action = getActionFromKey(key, this.open);

      switch(action) {
        case MenuActions.Next:
        case MenuActions.Last:
        case MenuActions.First:
        case MenuActions.Previous:
          event.preventDefault();
          const nextFilteredIndex = getUpdatedIndex(activeFilteredIndex, max, action);
          const nextRealIndex = this.options.indexOf(this.filteredOptions[nextFilteredIndex]);
          return this.onOptionChange(nextRealIndex);
        case MenuActions.CloseSelect:
          event.preventDefault();
          return this.updateOption(this.activeIndex);
        case MenuActions.Close:
          event.preventDefault();
          return this.updateMenuState(false);
        case MenuActions.Open:
          return this.updateMenuState(true);
      }
    }

    MultiselectButtons.prototype.onInputBlur = function() {
      if (this.ignoreBlur) {
        this.ignoreBlur = false;
        return;
      }

      if (this.open) {
        this.updateMenuState(false, false);
      }
    }

    MultiselectButtons.prototype.onOptionChange = function(index) {
      this.activeIndex = index;
      this.inputEl.setAttribute('aria-activedescendant', `${this.idBase}-${index}`);

      // update active style
      const options = this.el.querySelectorAll('[role=option]');
      [...options].forEach((optionEl) => {
        optionEl.classList.remove('option-current');
      });
      options[index].classList.add('option-current');

      if (this.open && isScrollable(this.listboxEl)) {
        maintainScrollVisibility(options[index], this.listboxEl);
      }
    }

    MultiselectButtons.prototype.onOptionClick = function(index) {
      this.onOptionChange(index);
      this.updateOption(index);
      this.inputEl.focus();
    }

    MultiselectButtons.prototype.onOptionMouseDown = function() {
      this.ignoreBlur = true;
    }

    MultiselectButtons.prototype.removeOption = function(index) {
      const option = this.options[index];

      // update aria-selected
      const options = this.el.querySelectorAll('[role=option]');
      options[index].setAttribute('aria-selected', 'false');
      options[index].classList.remove('option-selected');

      // remove button
      const buttonEl = document.getElementById(`${this.idBase}-remove-${index}`);
      this.selectedEl.removeChild(buttonEl.parentElement);
    }

    MultiselectButtons.prototype.selectOption = function(index) {
      const selected = this.options[index];
      this.activeIndex = index;

      // update aria-selected
      const options = this.el.querySelectorAll('[role=option]');
      options[index].setAttribute('aria-selected', 'true');
      options[index].classList.add('option-selected');

      // add remove option button
      const buttonEl = document.createElement('button');
      const listItem = document.createElement('li');
      buttonEl.className = 'remove-option';
      buttonEl.type = 'button';
      buttonEl.id = `${this.idBase}-remove-${index}`;
      buttonEl.setAttribute('aria-describedby', `${this.idBase}-remove`);
      buttonEl.addEventListener('click', () => { this.removeOption(index); });
      buttonEl.innerHTML = selected + ' ';

      listItem.appendChild(buttonEl);
      this.selectedEl.appendChild(listItem);
    }

    MultiselectButtons.prototype.updateOption = function(index) {
      const option = this.options[index];
      const optionEls = this.el.querySelectorAll('[role=option]');
      const optionEl = optionEls[index];
      const isSelected = optionEl.getAttribute('aria-selected') === 'true';

      if (isSelected) {
        this.removeOption(index);
      }

      else {
        this.selectOption(index);
      }

      this.inputEl.value = '';
      this.filterOptions('');
    }

    MultiselectButtons.prototype.updateMenuState = function(open, callFocus = true) {
      this.open = open;

      this.comboEl.setAttribute('aria-expanded', `${open}`);
      open ? this.el.classList.add('open') : this.el.classList.remove('open');
      callFocus && this.inputEl.focus();
    }

    // init multiselect w/ inline buttons
    const inlineButtonEl = document.querySelector('.js-inline-buttons');
    const inlineButtonComponent = new MultiselectButtons(inlineButtonEl, options);
    inlineButtonComponent.init();

</script>
